{"version":3,"sources":["redux/actions/index.js","pages/Login.jsx","components/Currency.jsx","components/PaymentMethod.jsx","components/CategoryExpenses.jsx","components/DescriptionPayment.jsx","components/HeaderWallet.jsx","components/TableWallet.jsx","pages/Wallet.jsx","App.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["requestCurrenciesSuccess","data","type","Login","state","email","password","disabled","redirect","handleChange","bind","addLogin","verifyEmail","verifyPassword","target","value","name","this","setState","arrEmail","split","includes","length","addEmail","props","getEmail","to","className","src","alt","Form","Group","Label","htmlFor","Control","onChange","data-testid","placeholder","id","style","margin","Text","Button","variant","onClick","Component","connect","dispatch","payload","Currency","currencies","curriciesFiltered","filter","currency","codein","map","index","key","code","wallet","PaymentMethod","CategoryExpenses","DescriptionPayment","description","min","maxLength","HeaderWallet","userEmail","valueTotal","width","parseFloat","toFixed","user","expenses","sumTotal","TableWallet","renderTable","remove","removeItem","item","filteredName","exchangeRates","currencyValue","ask","currencyValueFiltered","convertedValue","tag","method","Table","striped","hover","size","Wallet","fetchCurrencies","updateTotal","updateValueTotal","sum","forEach","element","Number","save","saveData","React","a","fetch","response","json","error","USDT","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","isLoading","itens","countId","walletReducer","Object","values","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fe0c3a89.chunk.js","sourcesContent":["export const GET_LOGIN = 'GET_LOGIN';\nexport const REQUEST_API = 'REQUEST_API';\nexport const REQUEST_CURRENCIES_SUCCESS = 'REQUEST_CURRENCIES_SUCCESS';\nexport const REQUEST_CURRENCIES_ERROR = 'REQUEST_CURRENCIES_ERROR';\nexport const SAVE_DATA = 'SAVE_DATA';\nexport const DELETE_ITEM = 'DELETE_ITEM';\nexport const UPDATE_VALUE_TOTAL = 'UPDATE_VALUE_TOTAL';\n\n// Action Login\n\nexport function getEmail(email) {\n  return {\n    type: GET_LOGIN,\n    payload: {\n      email,\n    },\n  };\n}\n\n// Actions Wallet\n\nexport function updateValueTotal(payload) {\n  return {\n    type: UPDATE_VALUE_TOTAL,\n    payload,\n  };\n}\n\nexport function removeItem(payload) {\n  return {\n    type: DELETE_ITEM,\n    payload,\n  };\n}\n\nexport function saveData(payload) {\n  return async (dispatch) => {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    delete data.USDT;\n    payload.exchangeRates = data;\n    dispatch({\n      type: SAVE_DATA,\n      payload,\n    });\n  };\n}\n\nexport function requestAPI() {\n  return {\n    type: REQUEST_API,\n  };\n}\n\nexport function requestCurrenciesSuccess(data) {\n  return {\n    type: REQUEST_CURRENCIES_SUCCESS,\n    data,\n  };\n}\nexport function requestCurrenciesError(error) {\n  return {\n    type: REQUEST_CURRENCIES_ERROR,\n    error,\n  };\n}\n\nexport function fetchAPI() {\n  return async (dispatch) => {\n    try {\n      dispatch(requestAPI()); // isLoading is true\n      // chama API\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const data = await response.json();\n      dispatch(requestCurrenciesSuccess(data)); // atualiza o estado global\n    } catch (error) {\n      dispatch(requestCurrenciesError(error)); // atualiza o estado global\n    }\n  };\n}\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { Button, Form } from 'react-bootstrap';\nimport { getEmail } from '../redux/actions';\n\nimport '../styles/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n      redirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addLogin = this.addLogin.bind(this);\n    this.verifyEmail = this.verifyEmail.bind(this);\n    this.verifyPassword = this.verifyPassword.bind(this);\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({\n      [name]: value,\n    });\n\n    if (this.verifyEmail() && this.verifyPassword()) {\n      this.setState({\n        disabled: false,\n      });\n    } else {\n      this.setState({\n        disabled: true,\n      });\n    }\n  }\n\n  verifyEmail() {\n    const { email } = this.state;\n    const arrEmail = email.split('');\n    const isValid = arrEmail.includes('@') && arrEmail.includes('.')\n    && arrEmail[arrEmail.length - 1] !== '.';\n\n    return isValid;\n  }\n\n  verifyPassword() {\n    const { password } = this.state;\n    const numberOfPassword = 5;\n    if (password.length >= numberOfPassword) {\n      return true;\n    }\n\n    return false;\n  }\n\n  addLogin() {\n    const { email } = this.state;\n    this.setState({\n      redirect: true,\n    });\n\n    const { getEmail: addEmail } = this.props;\n    addEmail(email);\n  }\n\n  render() {\n    const { email, password, disabled, redirect } = this.state;\n    if (redirect) {\n      return <Redirect to=\"/carteira\" />;\n    }\n    return (\n      <section className=\"login\">\n        <img src=\"https://img.icons8.com/cotton/64/000000/coin-wallet--v1.png\" alt=\"wallet\" />\n        <Form className=\"login_form\">\n          <Form.Group className=\"mb-3\">\n            <Form.Label htmlFor=\"email\">Email</Form.Label>\n            <Form.Control\n              name=\"email\"\n              type=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n              data-testid=\"email-input\"\n              placeholder=\"Insira seu email\"\n              id=\"email\"\n            />\n          </Form.Group>\n          <Form.Group style={ { margin: '0' } } className=\"form_password\">\n            <Form.Label htmlFor=\"password\">Senha</Form.Label>\n            <Form.Control\n              name=\"password\"\n              type=\"password\"\n              value={ password }\n              onChange={ this.handleChange }\n              data-testid=\"password-input\"\n              placeholder=\"Insira sua senha\"\n              id=\"password\"\n            />\n          </Form.Group>\n          <Form.Text className=\"text-muted\">\n            A senha deve possuir seis caracteres ou mais.\n          </Form.Text>\n          <Button\n            className=\"form_button\"\n            variant=\"success\"\n            type=\"button\"\n            disabled={ disabled }\n            onClick={ this.addLogin }\n          >\n            Entrar\n          </Button>\n        </Form>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getEmail: (payload) => dispatch(getEmail(payload)),\n});\n\nLogin.propTypes = {\n  getEmail: propTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Form } from 'react-bootstrap';\n\nclass Currency extends Component {\n  render() {\n    const { currencies, value, handleChange } = this.props;\n    const curriciesFiltered = currencies\n      .filter((currency) => currency.codein !== 'BRLT');\n    return (\n      <Form.Group>\n        <Form.Label htmlFor=\"currency\">\n          Moeda\n          <div>\n            <select\n              className=\"form-control\"\n              id=\"currency\"\n              name=\"currency\"\n              value={ value }\n              onChange={ handleChange }\n            >\n              {\n                curriciesFiltered.map((currency, index) => (\n                  <option\n                    key={ index }\n                    value={ currency.code }\n                  >\n                    {currency.code}\n\n                  </option>\n                ))\n              }\n            </select>\n          </div>\n        </Form.Label>\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nCurrency.propTypes = {\n  currencies: propTypes.arrayOf(propTypes.object).isRequired,\n  value: propTypes.string.isRequired,\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Currency);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\n\nclass PaymentMethod extends Component {\n  render() {\n    const { value, handleChange } = this.props;\n    return (\n      <Form.Group>\n        <Form.Label htmlFor=\"payment\">\n          Pagamento\n          <select\n            className=\"form-control\"\n            id=\"payment\"\n            name=\"method\"\n            value={ value }\n            onChange={ handleChange }\n          >\n            <option>\n              Dinheiro\n            </option>\n            <option>\n              Cartão de crédito\n            </option>\n            <option>\n              Cartão de débito\n            </option>\n          </select>\n        </Form.Label>\n      </Form.Group>\n    );\n  }\n}\n\nPaymentMethod.propTypes = {\n  value: propTypes.string.isRequired,\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default PaymentMethod;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\n\nclass CategoryExpenses extends Component {\n  render() {\n    const { value, handleChange } = this.props;\n    return (\n      <Form.Group>\n        <Form.Label htmlFor=\"category\">\n          Tag\n          <select\n            className=\"form-control\"\n            id=\"category\"\n            name=\"tag\"\n            value={ value }\n            onChange={ handleChange }\n          >\n            <option id=\"category\">\n              Alimentação\n            </option>\n            <option id=\"category\">\n              Lazer\n            </option>\n            <option id=\"category\">\n              Trabalho\n            </option>\n            <option id=\"category\">\n              Transporte\n            </option>\n            <option id=\"category\">\n              Saúde\n            </option>\n          </select>\n        </Form.Label>\n      </Form.Group>\n    );\n  }\n}\n\nCategoryExpenses.propTypes = {\n  value: propTypes.string.isRequired,\n  handleChange: propTypes.func.isRequired,\n};\n\nexport default CategoryExpenses;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\n\nimport '../styles/DescriptionPayment.css';\n\nclass DescriptionPayment extends Component {\n  render() {\n    const { value, description, handleChange } = this.props;\n    return (\n      <section className=\"description\">\n        <Form.Group>\n          <Form.Label htmlFor=\"expense\">\n            Valor\n            <Form.Control\n              type=\"number\"\n              id=\"expense\"\n              name=\"value\"\n              min=\"0\"\n              value={ value }\n              onChange={ handleChange }\n              placeholder=\"0.00\"\n            />\n          </Form.Label>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"description\">\n            Descrição\n            <Form.Control\n              type=\"text\"\n              id=\"description\"\n              name=\"description\"\n              value={ description }\n              maxLength=\"25\"\n              onChange={ handleChange }\n              placeholder=\"Insira uma descrição\"\n            />\n          </Form.Label>\n        </Form.Group>\n      </section>\n    );\n  }\n}\n\nDescriptionPayment.propTypes = {\n  value: propTypes.number.isRequired,\n  handleChange: propTypes.func.isRequired,\n  description: propTypes.string.isRequired,\n};\n\nexport default DescriptionPayment;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport '../styles/HeaderWallet.css';\n\nclass HeaderWallet extends Component {\n  render() {\n    const { userEmail, valueTotal } = this.props;\n    return (\n      <header className=\"header\">\n        <div>\n          <img src=\"https://img.icons8.com/windows/32/000000/email-open.png\" alt=\"email icon\" width=\"30px\" />\n          {' '}\n          <span data-testid=\"email-field\">{userEmail}</span>\n        </div>\n        <div>\n          <img src=\"https://img.icons8.com/ios/50/000000/money--v1.png\" alt=\"money icon\" width=\"30px\" />\n          {' '}\n          <span\n            data-testid=\"total-field\"\n            className=\"header_total\"\n          >\n            {`R$ ${parseFloat(valueTotal).toFixed(2)}`}\n          </span>\n          {' '}\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  currencies: state.wallet.expenses,\n  valueTotal: state.wallet.sumTotal,\n});\n\nHeaderWallet.propTypes = {\n  userEmail: propTypes.string.isRequired,\n  valueTotal: propTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(HeaderWallet);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Table } from 'react-bootstrap';\nimport { removeItem } from '../redux/actions';\n\nimport '../styles/TableWallet.css';\n\nclass TableWallet extends Component {\n  constructor() {\n    super();\n\n    this.renderTable = this.renderTable.bind(this);\n  }\n\n  renderTable() {\n    const { currencies, removeItem: remove } = this.props;\n\n    return currencies.map((item, index) => {\n      const { name } = item.exchangeRates[item.currency];\n      const filteredName = name.split('/')[0];\n      const currencyValue = item.exchangeRates[item.currency].ask;\n      const currencyValueFiltered = parseFloat(currencyValue).toFixed(2);\n      const convertedValue = parseFloat((item.value * currencyValue)).toFixed(2);\n\n      return (\n        <tr key={ index }>\n          <td>{item.description}</td>\n          <td>{item.tag}</td>\n          <td>{item.method}</td>\n          <td>{`${item.value}`}</td>\n          <td>{filteredName}</td>\n          <td>{currencyValueFiltered}</td>\n          <td>{convertedValue}</td>\n          <td>Real</td>\n          <td>\n            <Button\n              variant=\"danger\"\n              data-testid=\"delete-btn\"\n              type=\"button\"\n              onClick={ () => remove(item.id) }\n            >\n              Deletar\n            </Button>\n\n          </td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    if (currencies.length > 0) {\n      return (\n        <div className=\"table\">\n          <Table\n            striped\n            hover\n            size=\"sm\"\n            variant=\"success\"\n            id=\"columns\"\n          >\n            <thead>\n              <tr>\n                <th>Descrição</th>\n                <th>Tag</th>\n                <th>Pagamento</th>\n                <th>Valor</th>\n                <th>Moeda</th>\n                <th>Câmbio</th>\n                <th>Conversão</th>\n                <th>Moeda</th>\n                <th>Excluir</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.renderTable()}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }\n    return '';\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeItem: (payload) => dispatch(removeItem(payload)),\n});\n\nTableWallet.propTypes = {\n  currencies: propTypes.arrayOf(propTypes.object).isRequired,\n  removeItem: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableWallet);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport { fetchAPI, saveData, updateValueTotal } from '../redux/actions';\nimport Currency from '../components/Currency';\nimport PaymentMethod from '../components/PaymentMethod';\nimport CategoryExpenses from '../components/CategoryExpenses';\nimport DescriptionPayment from '../components/DescriptionPayment';\nimport HeaderWallet from '../components/HeaderWallet';\nimport TableWallet from '../components/TableWallet';\n\nimport '../styles/Wallet.css';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCurrencies } = this.props;\n    fetchCurrencies();\n  }\n\n  /* sumWallet() {\n    const { currencies } = this.props;\n    let sum = 0;\n    currencies.forEach((element) => {\n      sum\n      += Number(element.value) * Number(element.exchangeRates[element.currency].ask);\n    });\n    return sum;\n  } */\n\n  handleChange({ target }) {\n    const { name } = target;\n    const { value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { currencies, updateValueTotal: updateTotal } = this.props;\n    let sum = 0;\n    currencies.forEach((element) => {\n      sum\n      += Number(element.value) * Number(element.exchangeRates[element.currency].ask);\n    });\n    updateTotal(sum);\n\n    const { saveData: save } = this.props;\n    const { value, description, currency, method, tag, exchangeRates } = this.state;\n    return (\n      <>\n        <HeaderWallet />\n        <Form className=\"form\">\n          <DescriptionPayment\n            value={ value }\n            description={ description }\n            handleChange={ this.handleChange }\n          />\n          <div className=\"separator\" />\n          <div className=\"form_inputs\">\n            <Currency value={ currency } handleChange={ this.handleChange } />\n            <PaymentMethod value={ method } handleChange={ this.handleChange } />\n            <CategoryExpenses value={ tag } handleChange={ this.handleChange } />\n          </div>\n          <Button\n            type=\"button\"\n            variant=\"success\"\n            onClick={ () => save({ value,\n              description,\n              currency,\n              method,\n              tag,\n              exchangeRates }) }\n          >\n            Adicionar despesa\n          </Button>\n        </Form>\n\n        <TableWallet />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  currencies: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(fetchAPI()),\n  saveData: (payload) => dispatch(saveData(payload)),\n  updateValueTotal: (payload) => dispatch(updateValueTotal(payload)),\n});\n\nWallet.propTypes = {\n  fetchCurrencies: propTypes.func.isRequired,\n  saveData: propTypes.func.isRequired,\n  updateValueTotal: propTypes.func.isRequired,\n  currencies: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case GET_LOGIN:\n    return ({\n      ...state,\n      email: action.payload.email,\n    });\n\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n// Esse reducer será responsável por tratar as informações da pessoa usuária\n","import {\n  REQUEST_API,\n  REQUEST_CURRENCIES_SUCCESS,\n  REQUEST_CURRENCIES_ERROR,\n  SAVE_DATA, DELETE_ITEM,\n  UPDATE_VALUE_TOTAL,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isLoading: false,\n  error: null,\n  sumTotal: 0,\n};\n\nfunction removeItem(itens, id) {\n  return itens.filter((item) => item.id !== id);\n}\n\nlet countId = Number('-1');\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state,\n      isLoading: true,\n    };\n\n  case REQUEST_CURRENCIES_SUCCESS:\n    return {\n      ...state,\n      currencies: Object.values(action.data),\n      isLoading: false,\n    };\n\n  case REQUEST_CURRENCIES_ERROR:\n    return {\n      ...state,\n      error: action.error,\n    };\n\n  case SAVE_DATA:\n    countId += 1;\n    return {\n      ...state,\n      expenses: [...state.expenses, { ...action.payload, id: countId }],\n    };\n\n  case UPDATE_VALUE_TOTAL:\n    return {\n      ...state,\n      sumTotal: action.payload,\n    };\n\n  case DELETE_ITEM:\n    return {\n      ...state,\n      expenses: removeItem(state.expenses, action.payload),\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nexport default combineReducers({\n  user,\n  wallet,\n});\n\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}